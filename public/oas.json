{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Api quote api",
    "description": "An api that will return an inspiring api quote randomly",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "Marcelo",
      "email": "letschat@apiglue.io",
      "url": "http://twitter.com/apiglue"
    },
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    }
  },
  "host": "apiquote-api.herokuapp.com",
  "basePath": "/v1/quotes",
  "schemes": [
    "https"
  ],
  "paths": {
    "/random": {
      "get": {
        "description": "Return a random api quote",
        "operationId": "random",
        "responses": {
          "200": {
            "description": "Quote response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quote"
              }
            }
          },
          "404": {
            "description": "No quotes were found (possible empty db)"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Get a random quote"
      }
    },
    "/": {
      "get": {
        "description": "Return all quotes",
        "operationId": "allrandom",
        "responses": {
          "200": {
            "description": "Quote response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Quote"
              }
            }
          },
          "401": {
            "description": "invalid api key"
          },
          "404": {
            "description": "No quotes were found (possible empty db)"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Get all quotes",
        "security": [
          {
            "apikey": []
          }
        ]
      },
      "post": {
        "description": "Create a single quote",
        "operationId": "createQuote",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "object",
              "properties": {
                "quote": {
                  "type": "string"
                }
              }
            },
            "description": ""
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Quote Created"
          },
          "400": {
            "description": "Quote not supplied"
          },
          "401": {
            "description": "Invalid api key"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Create a quote",
        "security": [
          {
            "apikey": []
          }
        ]
      }
    },
    "/{id}": {
      "get": {
        "description": "Returns a quote based on a single ID",
        "operationId": "find quote by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quote to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Quote response",
            "schema": {
              "$ref": "#/definitions/Quote"
            }
          },
          "401": {
            "description": "Invalid api key"
          },
          "404": {
            "description": "Quote not found"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Get a quote by Id",
        "security": [
          {
            "apikey": []
          }
        ]
      },
      "put": {
        "description": "Update a single quote",
        "operationId": "updateQuote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quote to fetch",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "description": "",
              "type": "object",
              "properties": {
                "quote": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": [
                "quote"
              ]
            },
            "description": ""
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "responses": {
          "204": {
            "description": "Quote updated"
          },
          "400": {
            "description": "Quote not supplied"
          },
          "401": {
            "description": "Invalid api key"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Update a quote",
        "security": [
          {
            "apikey": []
          }
        ]
      },
      "delete": {
        "description": "deletes a single quote based on the ID supplied",
        "operationId": "deleteQuote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quote to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Quote deleted"
          },
          "401": {
            "description": "Invalid api key"
          },
          "500": {
            "description": "Server error"
          }
        },
        "summary": "Delete a quote",
        "security": [
          {
            "apikey": []
          }
        ]
      }
    },
    "/random/lametric": {
      "get": {
        "summary": "Get a random quote for Lametric",
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/QuoteLametric"
            },
            "examples": {
              "example-1": {
                "frames": [
                  {
                    "text": "I <3 APIs",
                    "icon": 25027
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        },
        "operationId": "get-random-lametric",
        "description": ""
      }
    }
  },
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "in": "header",
      "name": "API Key",
      "description": ""
    }
  },
  "definitions": {
    "Quote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "description": "quote id",
          "example": 42,
          "readOnly": true
        },
        "quote": {
          "type": "string",
          "description": "quote itself",
          "example": "KEEP CALM and let the API handle it"
        }
      }
    },
    "QuoteLametric": {
      "description": "",
      "type": "object",
      "properties": {
        "frames": {
          "type": "array",
          "uniqueItems": true,
          "minItems": 1,
          "items": {
            "required": [
              "text",
              "icon"
            ],
            "properties": {
              "text": {
                "type": "string",
                "minLength": 1
              },
              "icon": {
                "type": "number"
              }
            }
          }
        }
      },
      "required": [
        "frames"
      ]
    }
  }
}